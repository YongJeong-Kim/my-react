buildscript {
	ext {
		springBootVersion = '2.0.2.RELEASE'
	}
	repositories {
		mavenCentral()
		maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("io.franzbecker:gradle-lombok:1.8")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'war'
apply plugin: 'io.franzbecker.gradle-lombok'

group = 'com.kyj'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}

configurations {
	providedRuntime
}

dependencies {
	def querydslVersion = "4.2.1"
 
 	compile ("com.querydsl:querydsl-core:$querydslVersion")
  compile ("com.querydsl:querydsl-apt:$querydslVersion")
  compile ("com.querydsl:querydsl-jpa:$querydslVersion")
	compile ("com.querydsl:querydsl-sql:$querydslVersion")
	compile group: 'ch.simas.qlrm', name: 'qlrm', version: '1.7.1'
	
	compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.2'
	compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.9.2'

	compile('org.springframework.boot:spring-boot-starter-data-rest')
//	compile('org.springframework.boot:spring-boot-starter-data-mongodb-reactive')
	compile('org.springframework.boot:spring-boot-starter-webflux')
	compile('org.springframework.boot:spring-boot-starter-websocket')
	compile group: 'io.reactivex.rxjava2', name: 'rxjava', version: '2.1.14'
	compile group: 'commons-io', name: 'commons-io', version: '2.6'
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-thymeleaf')
	compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.boot:spring-boot-starter-web')
	runtime('org.springframework.boot:spring-boot-devtools')
	runtime('mysql:mysql-connector-java')
	compileOnly('org.projectlombok:lombok')
	providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')
	testCompile('org.springframework.boot:spring-boot-starter-test')
}

sourceSets {
  generated {
    java {
      srcDirs = ['src/main/generated']
    }
  }
}

task generateQueryDSL(type: JavaCompile, group: 'build') {
   source = sourceSets.main.java
   classpath = configurations.compile
   options.compilerArgs = [
      "-proc:only",
      "-processor", "com.querydsl.apt.jpa.JPAAnnotationProcessor"
   ]
   destinationDir = sourceSets.generated.java.srcDirs.iterator().next()
}

compileJava {
   dependsOn generateQueryDSL
   source generateQueryDSL.destinationDir
}
compileGeneratedJava {
   dependsOn generateQueryDSL
   options.warnings = false
   classpath += sourceSets.main.runtimeClasspath
}

clean {
   delete sourceSets.generated.java.srcDirs
}